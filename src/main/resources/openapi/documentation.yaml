openapi: 3.0.0
info:
  title: Expoll REST API
  summary: Simple poll backend server
  description: This is the backend api documentation for expoll
  license:
    name: MIT
    url: https://github.com/Universumgames/expoll_server/blob/main/LICENSE
  version: 2.6.0
servers:
  - url: https://expoll.mt32.net/api
    description: the production server api
  - url: http://localhost:7070/
    description: local test server

paths:
  /serverInfo:
    get:
      description: Get Meta info of backend server
      responses:
        200:
          description: Meta json object
          content:
            application/json:
              schema:
                type: object
                properties:
                  version:
                    type: string
                  minimumRequiredVersion:
                    type: string
                  serverPort:
                    type: integer
                    format: int32
                  frontendPort:
                    type: integer
                    format: int32
                  loginLinkBase:
                    type: string
                  mailSender:
                    type: string
  /metaInfo:
    get:
      description: get various debugging information
      responses:
        200:
          description: Meta info
          content:
            text/json:
  /compliance:
    get:
      description: Check if your client version is supported by the backend
      parameters:
        - name: version
          description: The client version
          in: query
          required: true
          schema:
            type: string
      responses:
        200:
          description: Value of version matching (1 if client > supported, -1 if client < supported, 0 if client == supported)
          content:
            text/plain:
              schema:
                type: integer
            examples:
              ExampleUnsupported:
                value: -1
              ExampleMatching:
                value: 0
              ExampleAhead:
                value: 1
        400:
          description: Version parameter missing
  /user:
    post:
      description: Create a new user
      parameters:
        - name: firstName
          description: The first name
          in: query
          required: true
        - name: lastName
          description: The last name
          in: query
          required: true
        - name: mail
          description: The email
          in: query
          required: true
        - name: username
          description: the chosen username
          in: query
          required: true
        - name: captcha
          description: Google captcha's code
          in: query
          required: false
        - name: appAttest
          description: Apples app attest
          in: query
          required: false
      responses:
        200:
          description: User was successfully created, returns a cookie and the first loginKey
          content:
            text/plain:
              schema:
                type: string
        400:
          description: Parameters are missing
        406:
          description: User with the same mail or username already exists or the mail is not valid
    get:
      description: get basic user data
      responses:
        200:
          description: Basic userdata
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                  username:
                    type: string
                  firstName:
                    type: string
                  lastName:
                    type: string
                  mail:
                    type: string
                  active:
                    type: string
                  admin:
                    type: string

        401:
          description: Unauthorized




components:
  schemas:

openapi: 3.0.0
info:
  title: Expoll REST API
  summary: Simple poll backend server
  description: This is the backend api documentation for expoll
  license:
    name: MIT
    url: https://github.com/Universumgames/expoll_server/blob/main/LICENSE
  version: 2.6.0
servers:
  - url: https://expoll.mt32.net/api
    description: the production server api
  - url: http://localhost:7070/
    description: local test server
  - url: http://192.168.178.68:7070
    description: local network testing

paths:
  /serverInfo:
    get:
      description: Get Meta info of backend server
      responses:
        200:
          description: Meta json object
          content:
            application/json:
              schema:
                type: object
                properties:
                  version:
                    type: string
                  minimumRequiredVersion:
                    type: string
                  serverPort:
                    type: integer
                    format: int32
                  frontendPort:
                    type: integer
                    format: int32
                  loginLinkBase:
                    type: string
                  mailSender:
                    type: string
  /metaInfo:
    get:
      description: get various debugging information
      responses:
        200:
          description: Meta info
          content:
            text/json:
  /compliance:
    get:
      description: Check if your client version is supported by the backend
      parameters:
        - name: version
          description: The client version
          in: query
          required: true
          schema:
            type: string
      responses:
        200:
          description: Value of version matching (1 if client > supported, -1 if client < supported, 0 if client == supported)
          content:
            text/plain:
              schema:
                type: integer
            examples:
              ExampleUnsupported:
                value: -1
              ExampleMatching:
                value: 0
              ExampleAhead:
                value: 1
        400:
          description: Version parameter missing
  /user:
    post:
      description: Create a new user
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateUserRequest"
            examples:
              max:
                  value:
                    firstName: Max
                    lastName: Mustermann
                    username: mamu
                    mail: max.mustermann@example.de
                    appAttest: "laskdfjhoidfjkhnsdfglkjh"
        required: true
      responses:
        200:
          description: User was successfully created, returns a cookie and the first loginKey
          content:
            text/plain:
              schema:
                type: string
              example: "c77cff5f-e5eb-4939-be9e-d5fd577bb770"
        400:
          description: Parameters are missing
        406:
          description: User with the same mail or username already exists or the mail is not valid
    get:
      description: get basic user data
      responses:
        200:
          description: Basic userdata
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                  username:
                    type: string
                  firstName:
                    type: string
                  lastName:
                    type: string
                  mail:
                    type: string
                  active:
                    type: string
                  admin:
                    type: string

        401:
          description: Unauthorized
  /vote:
    post:
      description: Vote for an option in a poll
      requestBody:
        description: The vote data
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/VoteChangeRequest"
            example:
              pollID: "ca63d9b6-fd62-4add-b8b5-e9696db21495"
              optionID: 43
              votedFor: 2
        required: true
      responses:
        "200":
          description: Vote was successfull
        "406":
          description: Poll or option does not exist, the votedFor value is invalid or 'maybe' is disabled



components:
  schemas:
    VoteChangeRequest:
      type: object
      properties:
        pollID:
          type: string
          description: the id of the poll to vote on
        optionID:
          type: integer
          description: the id of the option to vote
        votedFor:
          type: integer
          format: "0, 1 or 2"
          description: value of the vote NO(0), YES(1), MAYBE(2)
        userID:
          type: string
          required: if admins want to change the vote for other users
    CreateUserRequest:
      type: object
      properties:
        firstName:
          type: string
        lastName:
          type: string
        username:
          type: string
        mail:
          type: string
        captcha:
          type: string
          description: The google captchas code
          required: either this or appAttest
        appAttest:
          type: string
          description: Apples app attest
          required: either this or captcha
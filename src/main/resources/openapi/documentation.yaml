openapi: 3.0.0
info:
  title: Expoll REST API
  summary: Simple poll backend server
  description: This is the backend api documentation for expoll
  license:
    name: MIT
    url: https://github.com/Universumgames/expoll_server/blob/main/LICENSE
  version: 2.6.0
servers:
  - url: https://expoll.mt32.net/api
    description: the production server api
  - url: http://localhost:6060/
    description: local test server
  - url: http://192.168.178.68:6060
    description: local network testing

paths:
  /serverInfo:
    get:
      description: Get Meta info of backend server
      responses:
        200:
          description: Meta json object
          content:
            application/json:
              schema:
                type: object
                properties:
                  version:
                    type: string
                  minimumRequiredVersion:
                    type: string
                  serverPort:
                    type: integer
                    format: int32
                  frontendPort:
                    type: integer
                    format: int32
                  loginLinkBase:
                    type: string
                  mailSender:
                    type: string
  /metaInfo:
    get:
      description: get various debugging information
      responses:
        200:
          description: Meta info
          content:
            text/json:
  /compliance:
    get:
      description: Check if your client version is supported by the backend
      parameters:
        - name: version
          description: The client version
          in: query
          required: true
          schema:
            type: string
      responses:
        200:
          description: Value of version matching (1 if client > supported, -1 if client < supported, 0 if client == supported)
          content:
            text/plain:
              schema:
                type: integer
            examples:
              ExampleUnsupported:
                value: -1
              ExampleMatching:
                value: 0
              ExampleAhead:
                value: 1
        400:
          description: Version parameter missing
  /user:
    post:
      description: Create a new user
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateUserRequest"
            examples:
              max:
                  value:
                    firstName: Max
                    lastName: Mustermann
                    username: mamu
                    mail: max.mustermann@example.de
                    appAttest: "<app attest value>"
        required: true
      responses:
        200:
          description: User was successfully created, returns a cookie and the first loginKey
          content:
            text/plain:
              schema:
                type: string
              example: "<uuid>"
        400:
          description: Parameters are missing
        406:
          description: User with the same mail or username already exists or the mail is not valid
    get:
      description: get basic user data
      responses:
        200:
          description: Basic userdata
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                  username:
                    type: string
                  firstName:
                    type: string
                  lastName:
                    type: string
                  mail:
                    type: string
                  active:
                    type: string
                  admin:
                    type: string

        401:
          description: Unauthorized
  /vote:
    post:
      description: Vote for an option in a poll
      requestBody:
        description: The vote data
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/VoteChangeRequest"
            example:
              pollID: "<uuid>"
              optionID: 43
              votedFor: 2
        required: true
      responses:
        "200":
          description: Vote was successfull
        "406":
          description: Poll or option does not exist, the votedFor value is invalid or 'maybe' is disabled
        403:
          description: Maximum number on Yes/Maybe votes on this poll is too high
  /auth/simple:
    post:
      description: Login via loginkey or request a login mail
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                loginKey:
                  type: string
                  description: the key to login
                  required: this or mail
                mail:
                  type: string
                  description: the mail address of the user
                  required: this or loginKey
            examples:
              Request:
                summary: Requesting login mail
                value: '{"mail": "max.mustermann@example.org"}'
              LoginKey:
                summary: Get auth cookie
                value: '{"loginKey": "<uuid>"}'
        required: true
      responses:
        200:
          description: The login was successfull
          content:
            cookie:
              schema:
                type: string
              example: '{"loginKey":"<uuid>"}'
        400:
          description: Parameter missing, user does not exist
        401:
          description: The loginKey is invalid
  /auth/logout:
    delete:
      description: Logout the current session or a specified one
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                shortKey:
                  type: string
                  description: the first 4 characters of a loginkey
            example: '{"shortKey": "abcd"}'
      responses:
        200:
          description: Session was deleted and cookie removed (if deleted SEssion is not the active one)
        401:
          description: Unauthorized
  /auth/logoutAll:
    delete:
      description: Logout all sessions
      responses:
        200:
          description: All sessions were deleted
        401:
          description: Unauthorized
  /auth/webauthn/register:
    get:
      description: Undocumented endpoint to start webauthn registration
    post:
      description: Undocumented endpoint to save webauthn
  /auth/webauthn/authenticate:
    get:
      description: Undocumented endpoint to start authentication
    post:
      description: Undocumented endpoint to start authentication
  /auth/webauthn/list:
    get:
      description: get list of all webauthn authenticators
      responses:
        200:
          description: list of the authenticators
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SimpleAuthenticator'
        401:
          description: Unauthorized
  /auth/webauthn/edit:
    post:
      description: edit an authenticator (currently only changing its name)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                credentialID:
                  type: string
                newName:
                  type: string
                  description: The new name for the authenticator
      responses:
        200:
          description: Renaming successfull
        401:
          description: Unauthorized
        403:
          description: Authenticator does not exist
  /auth/webauthn/:
    delete:
      description: delete an authenticator TODO
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                credentialID:
                  type: string
                  description: the authenticator you want to delete
      responses:
        200:
          description: Deletion was successfull
        401:
          description: Unauthorized
        403:
          description: Authenticator does not exist
  /simple/poll/{pollId}/title:
    get:
      description: Get the name for a poll
      parameters:
        - name: pollId
          in: path
          required: true
      responses:
        200:
          description: The name of the requested poll
          content:
            plain/text:
              schema:
                type: string
              example: "This is a great pollname"
        400:
          description: PollID parameter missing or poll does not exist
  /simple/mailregex:
    get:
      description: Get all regex rules the mail has to comply to
      responses:
        200:
          description: List of all regex rules
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: "#/components/schemas/MailRegexRule"
  /notifications/preferences:
    get:
      description: Get notification preferences
      responses:
        200:
          description: Notification preferences
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotificationPreferences"
        401:
          description: Unauthorized
    post:
      description: Set notification preferences
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NotificationPreferences"
      responses:
        200:
          description: Setting new Notification preferences was successful
        401:
          description: Unauthorized
  /notifications/apple:
    post:
      description: register a new apple device for push notifications
      requestBody:
        required: true
        content: 
          application/json:
            schema:
              type: object
              properties:
                deviceID:
                  type: string
            example: '{"deviceID":"the generated deviceid"}'
      responses:
        200:
          description: Device was added (or moved) to user
        400:
          description: Unauthorized
  /poll:
    get:
      description: Get poll list or poll details
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                pollID:
                  type: string
                  required: false
      responses:
        200:
          description: Poll list
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/SimplePoll"
        200(alt):
          description: Poll details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DetailedPoll"





components:
  schemas:
    VoteChangeRequest:
      type: object
      properties:
        pollID:
          type: string
          description: the id of the poll to vote on
        optionID:
          type: integer
          description: the id of the option to vote
        votedFor:
          type: integer
          format: "0, 1 or 2"
          description: value of the vote NO(0), YES(1), MAYBE(2)
        userID:
          type: string
          required: if admins want to change the vote for other users
    CreateUserRequest:
      type: object
      properties:
        firstName:
          type: string
        lastName:
          type: string
        username:
          type: string
        mail:
          type: string
        captcha:
          type: string
          description: The google captchas code
          required: either this or appAttest
        appAttest:
          type: string
          description: Apples app attest
          required: either this or captcha
    MailRegexRule:
      type: object
      properties:
        id:
          type: string
        regex:
          type: string
          description: the regex rule
        blacklist:
          type: boolean
          description: indicates whether this is a rule that is not allowed or that must be followed
    NotificationPreferences:
      type: object
      properties:
        pollArchived:
          type: boolean
        pollDeleted:
          type: boolean
        pollEdited:
          type: boolean
        userAdded:
          type: boolean
        userRemoved:
          type: boolean
        voteChange:
          type: boolean
        userID:
          type: string
          readonly: true
    SimpleAuthenticator:
      type: object
      properties:
        credentialID:
          type: string
        name:
          type: string
        initiatorPlatform:
          type: string
        created:
          type: string
          format: DateTime
    SimpleUser:
      type: object
      properties:
        firstName:
          type: string
        lastName:
          type: string
        username:
          type: string
        id:
          type: string
    SimplePoll:
      type: object
      properties:
        pollID:
          type: string
        name:
          type: string
        admin:
          $ref: "#/components/schemas/SimpleUser"
        description:
          type: string
        userCount:
          type: number
        lastUpdated:
          type: string
        type:
          type: number
        editable:
          type: boolean
    ComplexOption:
      type: object
      properties:
        id:
          type: string
        value:
          type: string
          optional: true
        dateStart:
          type: date
          optional: true
        dateEnd:
          type: date
          optional: true
        dateTimeStart:
          type: datetime
          optional: true
        dateTimeEnd:
          type: datetime
          optional: true
    UserVote:
      type: object
      properties:
        user:
          $ref: "#/components/schemas/SimpleUser"
        votes:
          type: array
          items:
            properties:
              optionID:
                type: number
              votedFor:
                type: number
    UserNote:
      type: object
      properties:
        userID:
          type: string
        note:
          type: string
    DetailedPoll:
      type: object
      allOf:
        - $ref: "#/components/schemas/SimplePoll"
        - type: object
          properties:
            created:
              type: datetime
            options:
              type: array
              items:
                $ref: "#/components/schemas/ComplexOption"
            userVotes:
              type: array
              items:
                $ref: "#/components/schemas/UserVote"
            userNotes:
              type: array
              items:
                $ref: "#/components/schemas/UserNote"
            allowedMaybe:
              type: boolean
            allowsEditing:
              type: boolean
            shareURL:
              type: url
